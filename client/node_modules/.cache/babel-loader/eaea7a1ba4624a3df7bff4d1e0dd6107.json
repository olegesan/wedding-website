{"ast":null,"code":"var _jsxFileName = \"/Users/olegbaz/Documents/GitHub/test-wedding/wedding-backend/client/src/components/StickyNavBar.js\";\nimport React, { useState, useEffect } from 'react';\nimport Scrollspy from 'react-scrollspy';\nimport './StickyNavBar.css';\n\nfunction StickyNavBar(props) {\n  const [sticky, setSticky] = useState(false);\n  const [beenSticky, setBeenSticky] = useState(false);\n  useEffect(() => {\n    if (props.sticky) {\n      setSticky(true);\n      setBeenSticky(true);\n    } else {\n      setSticky(false);\n    }\n  }, [props.sticky]);\n\n  let sticky_state = () => {\n    if (!beenSticky) {\n      return 'none';\n    } else if (sticky) {\n      return 'show';\n    } else {\n      return 'hidden';\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: `${sticky_state()} scrollspy`,\n    style: {\n      'position': 'fixed',\n      'top': '0px'\n    },\n    id: \"StickyNavBar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(Scrollspy, {\n    items: ['TopPane', 'Ceremony', 'Reception', 'Afterparty', 'Accomodations', 'Regestry', 'RSVP'],\n    currentClassName: \"is-current\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: \"/#TopPane\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Top\")), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: \"/#Ceremony\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Ceremony\")), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: \"/#Reception\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Reception\")), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: \"/#Afterparty\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Afterparty\")), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: \"/accommodations\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Accommodations\")), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: \"/registry\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Regestry\")), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: \"/RSVP\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"RSVP\"))));\n}\n\nexport default StickyNavBar;","map":{"version":3,"sources":["/Users/olegbaz/Documents/GitHub/test-wedding/wedding-backend/client/src/components/StickyNavBar.js"],"names":["React","useState","useEffect","Scrollspy","StickyNavBar","props","sticky","setSticky","beenSticky","setBeenSticky","sticky_state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAO,oBAAP;;AAGA,SAASC,YAAT,CAAuBC,KAAvB,EAA6B;AACzB,QAAK,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,KAAD,CAAnC;AACA,QAAK,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,KAAD,CAA3C;AACAC,EAAAA,SAAS,CAAC,MAAI;AACV,QAAIG,KAAK,CAACC,MAAV,EAAiB;AACbC,MAAAA,SAAS,CAAC,IAAD,CAAT;AACAE,MAAAA,aAAa,CAAC,IAAD,CAAb;AACH,KAHD,MAGK;AACDF,MAAAA,SAAS,CAAC,KAAD,CAAT;AACH;AACJ,GAPQ,EAOP,CAACF,KAAK,CAACC,MAAP,CAPO,CAAT;;AAQI,MAAII,YAAY,GAAG,MAAK;AACpB,QAAG,CAACF,UAAJ,EAAe;AACX,aAAO,MAAP;AACH,KAFD,MAGK,IAAIF,MAAJ,EAAW;AACZ,aAAO,MAAP;AACH,KAFI,MAEA;AACD,aAAO,QAAP;AACH;AACJ,GATD;;AAUA,SACI;AAAK,IAAA,SAAS,EAAG,GAAEI,YAAY,EAAG,YAAlC;AAA+C,IAAA,KAAK,EAAE;AAAC,kBAAW,OAAZ;AAAoB,aAAM;AAA1B,KAAtD;AAAwF,IAAA,EAAE,EAAC,cAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AAAY,IAAA,KAAK,EAAG,CAAC,SAAD,EAAY,UAAZ,EAAwB,WAAxB,EAAoC,YAApC,EAAiD,eAAjD,EAAiE,UAAjE,EAA4E,MAA5E,CAApB;AAA0G,IAAA,gBAAgB,EAAC,YAA3H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM;AAAG,IAAA,IAAI,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAN,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM;AAAG,IAAA,IAAI,EAAC,YAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAN,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM;AAAG,IAAA,IAAI,EAAC,aAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAN,CAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM;AAAG,IAAA,IAAI,EAAC,cAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAN,CAJJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM;AAAG,IAAA,IAAI,EAAC,iBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAN,CALJ,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM;AAAG,IAAA,IAAI,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAN,CANJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM;AAAG,IAAA,IAAI,EAAC,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAN,CAPJ,CADJ,CADJ;AAaH;;AACL,eAAeN,YAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Scrollspy from 'react-scrollspy';\nimport './StickyNavBar.css'\n\n\nfunction StickyNavBar (props){\n    const[sticky, setSticky] = useState(false);\n    const[beenSticky, setBeenSticky] = useState(false);\n    useEffect(()=>{\n        if (props.sticky){\n            setSticky(true)\n            setBeenSticky(true)\n        }else{\n            setSticky(false)\n        }\n    },[props.sticky])\n        let sticky_state = () =>{\n            if(!beenSticky){\n                return 'none'\n            }\n            else if (sticky){\n                return 'show'\n            }else{\n                return 'hidden'\n            }\n        }\n        return(\n            <div className={`${sticky_state()} scrollspy`} style={{'position':'fixed','top':'0px'}} id='StickyNavBar'>\n                <Scrollspy  items={ ['TopPane', 'Ceremony', 'Reception','Afterparty','Accomodations','Regestry','RSVP'] } currentClassName=\"is-current\">\n                    <span><a href=\"/#TopPane\" >Top</a></span>\n                    <span><a href=\"/#Ceremony\" >Ceremony</a></span>\n                    <span><a href=\"/#Reception\" >Reception</a></span>\n                    <span><a href=\"/#Afterparty\" >Afterparty</a></span>\n                    <span><a href=\"/accommodations\" >Accommodations</a></span>\n                    <span><a href=\"/registry\" >Regestry</a></span>\n                    <span><a href=\"/RSVP\" >RSVP</a></span>\n                </Scrollspy>\n            </div>\n        )\n    }\nexport default StickyNavBar;"]},"metadata":{},"sourceType":"module"}